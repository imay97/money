import telebot
import cherrypy
import psycopg2
from telebot import types
import datetime
import hashlib

API_TOKEN = '1129280265:AAGcX5WBLwReXZOEbMHvLQpD-BoYnMhSyn0'
WEBHOOK_HOST = '138.68.22.231'
WEBHOOK_PORT = 80 #8443 80 88 443
WEBHOOK_LISTEN = '0.0.0.0'
WEBHOOK_SSL_CERT = '/home/tele/cert/cert.pem'
WEBHOOK_SSL_PRIV = '/home/tele/cert/pkey.key'
WEBHOOK_URL_BASE = 'https://' + str(WEBHOOK_HOST) + ':' + str(WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % (API_TOKEN)

bot = telebot.TeleBot(API_TOKEN)

class WebhookServer(object):
    @cherrypy.expose
    def index(self):
        if 'content-length' in cherrypy.request.headers and \
           'content-type' in cherrypy.request.headers and \
           cherrypy.request.headers['content-type'] == 'application/json':
            length = int(cherrypy.request.headers['content-length'])
            json_string = cherrypy.request.body.read(length).decode("utf-8")
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            return ''
        else:
            raise cherrypy.HTTPError(403)
#begin

conn = psycopg2.connect(dbname='adm', user='adm',
                    password='adm', host='127.0.0.1')

def key_main():
    keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
    btns = []
    btns.append(types.KeyboardButton('ü§ë –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'))
    btns.append(types.KeyboardButton('üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã'))
    btns.append(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'))
    btns.append(types.KeyboardButton('‚ùî –ü–æ–º–æ—â—å'))
    keyboard.add(*btns)
    return keyboard

def key_money():
    keyboard = types.InlineKeyboardMarkup(row_width = 1)
    btns = []
    btns.append(types.InlineKeyboardButton('üó£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, 200—Ä—É–±', callback_data = "say"))
    btns.append(types.InlineKeyboardButton('üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, 100—Ä—É–±', callback_data = "follow"))
    btns.append(types.InlineKeyboardButton('üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏, 50—Ä—É–±', callback_data = "see"))
    keyboard.add(*btns)
    return keyboard

def key_admin():
    keyboard = types.InlineKeyboardMarkup(row_width = 1)
    btns = [[types.InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data = "statistic_qsxcdlewgfwefwfafmag")], [types.InlineKeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞', callback_data = "wefkbamklcsdfdsfhbffwca")]],[[types.InlineKeyboardButton('–ó–∞–¥–∞–Ω–∏—è', callback_data = "uhbergubidvskmcxrnladfsbfgb")],[types.InlineKeyboardButton('–†–µ–∫–ª–∞–º–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞', callback_data = "123g278hgui34tmdsknladfsbfgb")]],[[types.InlineKeyboardButton('–í—ã—Ö–æ–¥', callback_data = "tvwuien3v489gauoivqhoiguwsdgk")]]
    keyboard.add(*btns)
    return keyboard

@bot.message_handler(commands = ['admin'])
def admin_panel(message):
    with conn.cursor() as cur:
        cur.execute('SELECT name, pswd FROM admins WHERE id = %s', (message.chat.id,))
        if bool(cur.rowcount):
            name = cur.fetchone()[0]
            print(name, cur.rowcount)
            pswd = cur.fetchone()[1]
            print(pswd)
            if(pswd == message.text[7:]):
                bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ' + str(cur.fetchone()[1]).replace('None', '') + '.\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup = key_admin())

@bot.message_handler(commands = ['start'])  #–ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å MENU
def start(message):
    if message.text[7:] != '':
        print(message.text[7:])
        with conn.cursor() as cur:
            cur.execute('SELECT id FROM users WHERE id = %s', (message.chat.id,))
            if not bool(cur.rowcount):
                cur.execute('SELECT id FROM users WHERE ref = %s', (message.text[7:],))
                if bool(cur.rowcount):
                    id = cur.fetchone()[0]
                    if(id == message.chat.id):
                        bot.send_message(id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è", reply_markup = key_main())
                    else:
                        bot.send_message(id, "–ü–∞—Ä—Ç–Ω—ë—Ä –ø–µ—Ä–µ—à—ë–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ", reply_markup = key_main())
                        cur.execute('UPDATE users SET balance = balance + 200 WHERE id = %s', (id,))
                        cur.execute('INSERT INTO partners (id_me, id_partners) VALUES (%s, %s)', (id, message.chat.id))
                        conn.commit()
                else:
                    print('–†–µ—Ñ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            else:
                print('–ü–∞—Ä—Ç–Ω—ë—Ä —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω')

    with conn.cursor() as cur:
        id = message.chat.id
        cur.execute('SELECT id FROM users WHERE id = %s', (id,))
        if not bool(cur.rowcount):
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥.', reply_markup = key_main())
            hash = hashlib.md5(str(id).encode())
            name = str(message.chat.last_name) + ' ' + str(message.chat.first_name)
            time = str(datetime.datetime.today().strftime('%H.%M.%S'))
            cur.execute('INSERT INTO users (id, name, ref, balance, time) VALUES (%s, %s, %s, 0, %s)', (id, name, str(hash.hexdigest()), time))
            conn.commit()
        else:
            if id == cur.fetchone()[0]:
                bot.send_message(id, "–ú–µ–Ω—é", reply_markup = key_main())

@bot.message_handler(content_types=['text'])
def handler(message):
    with conn.cursor() as cur:
        id = int(message.chat.id)
        if(message.text == 'ü§ë –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'):
            bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞", reply_markup = key_money())
        if(message.text == 'üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã'):
            bot.send_message(id, '–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –≤ –±–æ—Ç –∏ \
–ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –Ω–∏—Ö –¥–µ–Ω—å–≥–∏!\n\
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ: \n\
' + partners(id, 1) + '\n\
200 —Ä—É–±. –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –í–∞–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n\
–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + partners(id, 2), reply_markup = key_main())
        if(message.text == '‚ùî –ü–æ–º–æ—â—å'):
            bot.send_message(id, "–í —ç—Ç–æ–º –±–æ—Ç–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞: ‚ôªÔ∏è–∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –ø–ª–∞—Ç—è—Ç –±–æ—Ç—É –∑–∞ —Ä–µ–∫–ª–∞–º—É, –∞ –±–æ—Ç –ø–ª–∞—Ç–∏—Ç —Ç–µ–±–µ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã!\
–í—ã–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–∑ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞: –°–±–µ—Ä–±–∞–Ω–∫, Qiwi, –Ø–î–µ–Ω—å–≥–∏, WebMoney –∏ –¥—Ä.\
\
üì£–°–≤–æ–π –æ—Ç–∑—ã–≤ –ø–∏—à–∏ –º–Ω–µ: @xyu_pizda", reply_markup = key_main())
        if(message.text == 'üí∞ –ë–∞–ª–∞–Ω—Å'):
            cur.execute('SELECT balance FROM users WHERE id = %s', (id,))
            bot.send_message(id, "–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(cur.fetchone()[0]) + " —Ä—É–±\n\
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 3000 —Ä—É–±.", reply_markup = key_main())

@bot.callback_query_handler(func = lambda call: True) #–ü—Ä–∏—ë–º CALL_BACK_DATA —Å –∫–Ω–æ–ø–æ–∫
def callback_inline(call):
    id = call.message.chat.id
    if call.data == 'say':
        bot.send_message(id, '–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –≤ –±–æ—Ç –∏ \
–ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –Ω–∏—Ö –¥–µ–Ω—å–≥–∏!\n\
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ: \n\
' + partners(id, 1) + '\n\
200 —Ä—É–±. –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –í–∞–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n\
–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + partners(id, 2), reply_markup = key_main())
    if call.data == 'follow':
        bot.send_message(id, '‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å —É–∂–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!')
    if call.data == 'see':
        with conn.cursor() as cur:
            cur.execute('SELECT time FROM users WHERE id = %s', (id,))
            now = datetime.datetime.today()
            then = datetime.datetime.strptime(str(cur.fetchone()[0]), '%H.%M.%S')
            delta = now - then
            if(delta.seconds < 3600):
                total = 3600 - delta.seconds
                minutes = (total % 3600) // 60
                seconds = total - (minutes * 60)
                bot.send_message(id, '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ' + str(minutes) + ' –º–∏–Ω. ' + str(seconds) + ' —Å–µ–∫.')
            else:
                cur.execute('UPDATE users SET time = %s', (now.strftime('%H.%M.%S'),))
                conn.commit()
                msg = bot.send_message(id, '–í—ã–ø–æ–ª–Ω–µ–Ω–æ: 1 –∏–∑ 24')
                for i in range(25):
                    msg = bot.edit_message_text('–í—ã–ø–æ–ª–µ–Ω–æ: ' + str(i) + ' –∏–∑ 25\n', chat_id=id, message_id=msg.message_id)
                msg = bot.edit_message_text('–í—ã–ø–æ–ª–µ–Ω–æ: 25 –∏–∑ 25\n–ù–∞—á–∏—Å–ª–µ–Ω–æ: 50 —Ä—É–±.', chat_id=id, message_id=msg.message_id)
                cur.execute('UPDATE users SET balance = balance + 50 WHERE id = %s', (id,))
                conn.commit()

def partners(id, func):
    with conn.cursor() as cur:
        try:
            if(func == 1):
                cur.execute('SELECT ref FROM users WHERE id = %s', (id,))
                return 'https://t.me/imaycash_bot?start=' + cur.fetchone()[0]
            if(func == 2):
                cur.execute('SELECT COUNT(id_partners) FROM partners WHERE id_me = %s', (id,))
                n = cur.fetchone()[0]
                return str(n) + '\n–ó–∞—Ä–∞–±–æ—Ç–æ–∫: ' + str(200 * int(n))
        except:
            return 'None'

#end
bot.remove_webhook()
bot.set_webhook(url = WEBHOOK_URL_BASE + WEBHOOK_URL_PATH, certificate = open(WEBHOOK_SSL_CERT, 'r'))

cherrypy.config.update({
    'server.socket_host': WEBHOOK_LISTEN,
    'server.socket_port': WEBHOOK_PORT,
    'server.ssl_module': 'builtin',
    'server.ssl_certificate': WEBHOOK_SSL_CERT,
    'server.ssl_private_key': WEBHOOK_SSL_PRIV
})

cherrypy.quickstart(WebhookServer(), WEBHOOK_URL_PATH, {'/': {}})
