import telebot
import cherrypy
import psycopg2
from telebot import types

API_TOKEN = '1129280265:AAGcX5WBLwReXZOEbMHvLQpD-BoYnMhSyn0'
WEBHOOK_HOST = '138.68.22.231'
WEBHOOK_PORT = 80 #8443 80 88 443
WEBHOOK_LISTEN = '0.0.0.0'
WEBHOOK_SSL_CERT = '/home/tele/cert/cert.pem'
WEBHOOK_SSL_PRIV = '/home/tele/cert/pkey.key'
WEBHOOK_URL_BASE = 'https://' + str(WEBHOOK_HOST) + ':' + str(WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % (API_TOKEN)

bot = telebot.TeleBot(API_TOKEN)

class WebhookServer(object):
    @cherrypy.expose
    def index(self):
        if 'content-length' in cherrypy.request.headers and \
           'content-type' in cherrypy.request.headers and \
           cherrypy.request.headers['content-type'] == 'application/json':
            length = int(cherrypy.request.headers['content-length'])
            json_string = cherrypy.request.body.read(length).decode("utf-8")
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            return ''
        else:
            raise cherrypy.HTTPError(403)
#begin

def key_main():
    keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
    btns = []
    btns.append(types.KeyboardButton('ü§ë –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'))
    btns.append(types.KeyboardButton('üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã'))
    btns.append(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'))
    btns.append(types.KeyboardButton('‚ùî –ü–æ–º–æ—â—å'))
    keyboard.add(*btns)
    return keyboard

def key_money():
    keyboard = types.InlineKeyboardMarkup(row_width = 1)
    btns = []
    btns.append(types.InlineKeyboardButton('üó£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, 200—Ä—É–±', callback_data = "say"))
    btns.append(types.InlineKeyboardButton('üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, 100—Ä—É–±', callback_data = "follow"))
    btns.append(types.InlineKeyboardButton('üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏, 50—Ä—É–±', callback_data = "see"))
    keyboard.add(*btns)
    return keyboard

@bot.message_handler(commands = ['start'])  #–ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å MENU
def start(message):
    try:
        msg = int(open('msg_id' + str(message.chat.id)).read())
        bot.delete_message(message_id = msg, chat_id = message.chat.id)
    except:
        print("–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    msg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è.\
    –ù–∞–¥–æ–µ–ª–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –µ–±–∞–Ω—É—Ç—ã–µ\
    –ø—Ä–∏–∫–∞–∑—ã –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤ (–Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤)?\
    –ó–∞–µ–±–∞–ª–∏ —Å–∞–º–æ–ª—ë—Ç—ã?\
    –ñ–∏–≤–µ—à—å –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã?\
    –ù–µ —Ö–æ—á–µ—à—å –±—Ä–∞—Ç—å –∫—Ä–µ–¥–∏—Ç –Ω–∞ –º–∞—à–∏–Ω—É?\
    –¢–æ–≥–¥–∞ —Ç–µ–±–µ –∫ –Ω–∞–º. –° –Ω–∞–º–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫,\
    —Å–∏–¥—è –¥–æ–º–∞ –∏ –∏–≥—Ä–∞—è –≤ –¥–æ—Ç—É, –∑–∞–±—É–¥–µ—à—å —á—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–µ–¥–∏—Ç—ã –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.\
    –ñ–º–∏ \"–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å\" –∏ –¥–µ–ª–∞–π —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –¥–µ–Ω—å–≥–∏.", reply_markup = key_main())
    with open('msg_id' + str(message.chat.id), 'w') as f:
        f.write(str(msg.message_id))

@bot.message_handler(content_types=['text'])
def handler(message):
    try:
        msg = int(open('msg_id' + str(message.chat.id)).read())
        bot.delete_message(message_id = msg, chat_id = message.chat.id)
    except:
        print("–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    if message.text == 'ü§ë –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å':
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞", reply_markup = key_money())
        with open('msg_id' + str(message.chat.id), 'w') as f:
            f.write(str(msg.message_id))

@bot.callback_query_handler(func = lambda call: True) #–ü—Ä–∏—ë–º CALL_BACK_DATA —Å –∫–Ω–æ–ø–æ–∫
def callback_inline(call):
    try:
        msg = int(open('msg_id' + str(call.message.chat.id)).read())
        bot.delete_message(message_id = msg, chat_id = call.message.chat.id)
    except:
        print("–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ")
    if call.data == 'say':
        msg = bot.send_message(call.message.chat.id, "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –≤ –±–æ—Ç –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –Ω–∏—Ö \
        –¥–µ–Ω—å–≥–∏!\n https://t.me/imaycash_bot \n 200—Ä—É–± –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –í–∞–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞", reply_markup = key_main())
    if call.data == 'follow':
        follow(call.message.chat.id)
    if call.data == 'see':
        msg = bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å—é —Ä–µ–∫–ª–∞–º—É", reply_markup = key_main())
    with open('msg_id' + str(call.message.chat.id), 'w') as f:
        f.write(str(msg.message_id))

def follow(id):
    conn = psycopg2.connect(dbname='adm', user='adm',
                        password='adm', host='127.0.0.1')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM test')
    msg = bot.send_message(id, cursor.fetchone(), reply_markup = key_main())

#end
bot.remove_webhook()
bot.set_webhook(url = WEBHOOK_URL_BASE + WEBHOOK_URL_PATH, certificate = open(WEBHOOK_SSL_CERT, 'r'))

cherrypy.config.update({
    'server.socket_host': WEBHOOK_LISTEN,
    'server.socket_port': WEBHOOK_PORT,
    'server.ssl_module': 'builtin',
    'server.ssl_certificate': WEBHOOK_SSL_CERT,
    'server.ssl_private_key': WEBHOOK_SSL_PRIV
})

cherrypy.quickstart(WebhookServer(), WEBHOOK_URL_PATH, {'/': {}})
